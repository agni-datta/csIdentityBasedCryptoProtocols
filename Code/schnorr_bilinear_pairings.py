from hashlib import sha3_256

from charm.toolbox.pairinggroup import G1, ZR, PairingGroup, pair

# Initialize pairing group with an elliptic curve that supports bilinear pairings.
GROUP = PairingGroup("MNT224")


def generate_keys():
    """
    Generates public and private keys for a Schnorr-like identification scheme using bilinear pairings.

    Returns:
        tuple: (generator, public_key, private_key)
            - generator: A generator of the elliptic curve group.
            - public_key: The public key element.
            - private_key: The private key element.
    """
    generator = GROUP.random(G1)
    private_key = GROUP.random(ZR)
    public_key = generator**private_key
    return generator, public_key, private_key


def create_proof(generator, public_key, private_key, user_input):
    """
    Prover's algorithm for generating a proof of knowledge of the private key.

    Args:
        generator (Element): Generator of the elliptic curve group.
        public_key (Element): The prover's public key.
        private_key (Element): The prover's private key.
        user_input (str): User input (e.g., password).

    Returns:
        tuple: (y_value, z_value)
            - y_value: The proof element computed using a random value.
            - z_value: The proof element computed using the random value and private key.
    """
    random_value = GROUP.random(ZR)
    y_value = generator**random_value

    hash_input = sha3_256((user_input + str(y_value)).encode()).digest()
    challenge = GROUP.init(ZR, int.from_bytes(hash_input, byteorder="big"))

    z_value = random_value - (private_key * challenge)
    return y_value, z_value


def verify_proof(generator, public_key, user_input, proof):
    """
    Verifier's algorithm for verifying the proof generated by the prover.

    Args:
        generator (Element): Generator of the elliptic curve group.
        public_key (Element): The prover's public key.
        user_input (str): User input (e.g., password).
        proof (tuple): (y_value, z_value) The proof elements to be verified.

    Returns:
        bool: True if the proof is valid, False otherwise.
    """
    y_value, z_value = proof

    hash_input = sha3_256((user_input + str(y_value)).encode()).digest()
    challenge = GROUP.init(ZR, int.from_bytes(hash_input, byteorder="big"))

    lhs = pair(generator, y_value)
    rhs = (
        pair(generator, generator) ** z_value * pair(public_key, generator) ** challenge
    )

    return lhs == rhs


def main():
    """
    Main function to demonstrate the Schnorr-like identification scheme using bilinear pairings.
    """
    generator, public_key, private_key = generate_keys()
    password = "secure_password"

    proof = create_proof(generator, public_key, private_key, password)
    verification_result = verify_proof(generator, public_key, password, proof)

    print("Public key (generator, public_key):", (generator, public_key))
    print("Proof (y_value, z_value):", proof)
    print("Verification Result:", verification_result)


if __name__ == "__main__":
    main()
